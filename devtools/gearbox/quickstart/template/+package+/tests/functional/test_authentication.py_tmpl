"""
Integration tests for the :mod:`repoze.who`-powered authentication sub-system.

As {{project}} grows and the authentication method changes, only these tests
should be updated.

"""

{{if not skip_tw}}
def test_forced_login(_app):
    """Anonymous users are forced to login

    Test that anonymous users are automatically redirected to the login
    form when authorization is denied. Next, upon successful login they
    should be redirected to the initially requested page.

    """
    app = _app('main')
    # Requesting a protected area
    resp = app.get('/admin/', status=302)
    assert resp.location.startswith('http://localhost/login')
    # Getting the login form:
    resp = resp.follow(status=200)
    form = resp.form
    # Submitting the login form:
    form['login'] = 'manager'
    form['password'] = 'managepass'
    post_login = form.submit(status=302)
    # Being redirected to the initially requested page:
    assert post_login.location.startswith('http://localhost/post_login')
    initial_page = post_login.follow(status=302)
    assert 'authtkt' in initial_page.request.cookies
    assert initial_page.location.startswith('http://localhost/admin/')
{{endif}}


def test_voluntary_login(_app):
    """Voluntary logins must work correctly"""
    app = _app('main')
    # Going to the login form voluntarily:
    resp = app.get('/login', status=200)
    form = resp.form
    # Submitting the login form:
    form['login'] = 'manager'
    form['password'] = 'managepass'
    post_login = form.submit(status=302)
    # Being redirected to the home page:
    assert post_login.location.startswith('http://localhost/post_login')
    home_page = post_login.follow(status=302)
    assert 'authtkt' in home_page.request.cookies
    assert home_page.location == 'http://localhost/'


def test_logout(_app):
    """Logouts must work correctly"""
    # Logging in voluntarily the quick way:
    app = _app('main')
    resp = app.get('/login_handler?login=manager&password=managepass',
                   status=302)
    resp = resp.follow(status=302)
    assert 'authtkt' in resp.request.cookies
    # Logging out:
    resp = app.get('/logout_handler', status=302)
    assert resp.location.startswith('http://localhost/post_logout')
    # Finally, redirected to the home page:
    home_page = resp.follow(status=302)
    authtkt = home_page.request.cookies.get('authtkt')
    assert not authtkt or authtkt == 'INVALID'
    assert home_page.location == 'http://localhost/'


def test_failed_login_keeps_username(_app):
    """Wrong password keeps user_name in login form"""
    app = _app('main')
    resp = app.get('/login_handler?login=manager&password=badpassword',
                   status=302)
    resp = resp.follow(status=200)
    assert 'Invalid Password' in resp
    assert resp.form['login'].value, 'manager'


def test_failed_invalid_name(_app):
    """before verifying password the username should be checked"""
    app = _app('main')
    resp = app.get('/login_handler?login=baduser&password=',
                   status=302)
    resp = resp.follow(status=200)
    assert resp.form['login'].value, 'baduser'
    assert 'User not found' in resp


def test_calling_post_login_directly(_app):
    app = _app('main')
    resp = app.get('/post_login', status=302)
    assert '__logins=1' in resp.location
    resp = resp.follow()
    assert 'Wrong credentials' in resp.body.decode('utf-8')